from java.io import File
from org.das2.util import FileUtil
from org.json import JSONObject
setScriptDescription('''Scan over infos, create HAPI request for every virtual 
variable.  This was written for development of the new HAPI server for CDAWeb.''')

# which virtual variables are implemented in Autoplot
autoplot= [ "compute_magnitude", "convert_log10", \
          "fftpowerdelta512", "fftpowerdelta1024", "fftpowerdelta2048",\
          "fftpower","fftPower512","fftPower1024","fftpowerdeltatranslation512", \
                "alternate_view", "calc_p", "region_filt", \
                "apply_esa_qflag", "apply_qflag",\
                "sum_values", "arr_slice", "apply_filter_flag" ]
autoplot= dict( zip( autoplot, autoplot ) )

# where virtual variables are implemented in the new HAPI Server
hapi= "alternate_view apply_esa_qflag apply_fgm_qflag apply_gmom_qflag apply_rtn_qflag comp_themis_epoch add_1800 apply_filter_flag convert_log10 clamp_to_zero arr_slice".split()
hapi= dict( zip( hapi, hapi ) )

dir='https://jfaden.net/~jbf/hapi/p/cdaweb/data/hapi/info/'
ffs= listDirectory(dir+'*.json')
monitor.taskSize= len(ffs)
monitor.started()

outs= open('/tmp/ap/virtualVariables.md','w')

count= {}

outs.write('| spid | name | funct | components | uri |\n')
outs.write('| ---- | ---- | ----- | ---------- | --- |\n')
for f in ffs:
    monitor.taskProgress= monitor.taskProgress+1
    if ( f.endswith('.errors.json' ) ):
        continue
    spid= f[:-5]
    
    print f
    try:
        fil= getFile(dir+f)
        json= JSONObject(FileUtil.readFileToString(fil))
        info= json.getJSONObject('info')
        parameters= info.getJSONArray('parameters')
        start= info.getString('sampleStartDate')
        stop= info.getString('sampleStopDate')
        tr= str(datumRange( start+'/'+stop )).replace(' ','+')
    except:
        print 'No parameters, or somthing else! '+f
        continue
        
    for i in xrange(parameters.length()):
        parameter= parameters.getJSONObject(i)
        n= parameter.getString("name")
        v= parameter.optString("x_cdf_FUNCT","")
        if ( len(v)>0 ):
            if count.has_key(v):
                cnt= count[v]+1
            else:
                cnt= 1
            count[v]= cnt
            if cnt>10:
                print 'seen enough already: ', v
                continue
            components= parameter.getJSONArray("x_cdf_COMPONENTS")
            c=""
            for cc in xrange(components.length()):
                c= c+","+components.getString(cc)
            if len(c)>0: c= c[1:]
            u= 'hapi?id='+spid+'&parameters='+n+'&timerange='+tr
            outs.write('| %s | %s | %s | %s | %s |\n' % ( spid, n, v, c, u ) )
            
outs.close()

outs= open('/tmp/ap/virtualVariablesSummary.md','w')
outs.write('| funct | count | autoplot | hapi |\n')
outs.write('| ---- | ---- | ---- | ---- |\n')
ss= count.keys()
ss.sort()

total=0
apTotal= 0
hpTotal= 0
for k in ss:
    cnt= count[k]
    total=total+cnt
    if ( autoplot.has_key(k) ): 
        ap='&checkmark;'
        apTotal= apTotal + cnt
    else:
        ap= ''
    hp= ''
    if ( hapi.has_key(k) ): 
        hp='&checkmark;'
        hpTotal= hpTotal + cnt
    else:
        hp= ''
    outs.write('| '+k+' | '+str(cnt) +'| '+ap+' | '+hp+' |\n')
outs.write('| <b>Totals</b> | <b>%d</b>| <b>%d</b> | <b>%d</b> |\n' % ( total, apTotal, hpTotal ) )
outs.close()

    
