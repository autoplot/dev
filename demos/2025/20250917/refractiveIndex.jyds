setScriptDescription('''Load WNA Data and plot refractive
index as a function of time and frequency.''')

tr= getParam( 'timerange', '2019-10-12', 'timerange to load' )
sc= getParam( 'sc', 'A', 'the spacecraft name', ['A','B'] )

theta= getDataSet('vap+cdaweb:ds=RBSP-%s_WNA-SURVEY_EMFISIS-L4&id=thsvd'%sc,tr)
fce= getDataSet('vap+cdaweb:ds=RBSP-%s_DENSITY_EMFISIS-L4&id=fce'%sc,tr)
fpe= getDataSet('vap+cdaweb:ds=RBSP-%s_DENSITY_EMFISIS-L4&id=fpe'%sc,tr)

fce,fpe= synchronize(theta,[fce,fpe])
freqs= getDataSet('vap+cdaweb:ds=RBSP-A_WNA-SURVEY_EMFISIS-L4&id=WFR_frequencies&timerange=2019-10-12')

fce= outerProduct( fce, ones(freqs.length()) )
fpe= outerProduct( fpe, ones(freqs.length()) )
f= outerProduct( ones(fce.length()),freqs )
f.putProperty( QDataSet.UNITS, None )
fce.putProperty( QDataSet.UNITS, None )
fpe.putProperty( QDataSet.UNITS, None )

print fpe, f, fce

R= 1 - fpe**2 / ( f * f - fce )
L= 1 - fpe**2 / ( f * f + fce )
P= 1 - fpe**2 / f**2
D= 1/2. * ( R - L )
S= 1/2. * ( R + L )

sin2theta= sin(theta)**2
cos2theta= cos(theta)**2

t1= R * L * sin2theta 
t2= P * S * ( 1+cos2theta )
t3= ( R * L - P * S )**2 * sin2theta**2
t4= ( 4 * P**2 * D**2 * cos2theta )
t5= 2 * ( S * sin2theta + P * cos2theta )

n2= ( t1 + t2 - sqrt( t3 + t4 ) ) / t5

print f, fce, fpe, n2

result= sqrt( n2 ) 

result.putProperty( QDataSet.LABEL, 'refractive index' )
result.putProperty( QDataSet.DEPEND_1, freqs )

