from org.autoplot.layout import LayoutConstants
setScriptTitle('slope digitizer')
setScriptDescription('''Demo created showing how a digitizer for measuring slopes
is made.  Reset and load the data, then run this script. click and drag to add a directed line 
segment to the digitizer tab.  Slopes are recorded on the digitizer tab.
<hr>This requires at least 20210709a (or v2021a_7 once released) to run.''')

#plot( 'file:///home/jbf/Downloads/180310_1700_2300-Heliotown.sps' )

from org.das2.components import DataPointRecorder
from org.das2.graph import Painter
from org.das2.graph import Arrow
from org.das2.graph import GraphUtil
from java.awt.geom import Point2D
from org.das2.util import GrannyTextRenderer

dpr= createDataPointRecorder()  # requires v2021a_7 or 20210701b
addTab( 'digitizer', dpr )

slopesm= createApplicationModel('slopes')
slopesm.dom.controller.reset()
slopesm.dom.controller.copyPlotAndPlotElements( slopesm.dom.plots[0], None, True, False );
addTab( 'slopes', slopesm.canvas )

def feedbackPaint( g ):
     from java.awt import BasicStroke
     ds= dpr.getDataPoints()
     if ( ds!=None ):
         i=1
         for d in ds:
             x1= dom.plots[0].controller.dasPlot.getXAxis().transform( d[0] )
             y1= dom.plots[0].controller.dasPlot.getYAxis().transform( d[1] )
             x2= dom.plots[0].controller.dasPlot.getXAxis().transform( d[2] )
             y2= dom.plots[0].controller.dasPlot.getYAxis().transform( d[3] )
             p1= Point2D.Double( x1, y1 )
             p2= Point2D.Double( x2, y2 )
             g.stroke= BasicStroke(3)
             g.color= Color.WHITE
             Arrow.paintArrow( g, p2, p1, 15, Arrow.HeadStyle.DRAFTING )
             g.stroke= BasicStroke(1)
             g.color= Color.GRAY
             Arrow.paintArrow( g, p2, p1, 15, Arrow.HeadStyle.DRAFTING )
     ds= dpr.getSelectedDataPoints()
     if ( ds!=None ): 
         for d in ds:
             x1= dom.plots[0].controller.dasPlot.getXAxis().transform( d[0] )
             y1= dom.plots[0].controller.dasPlot.getYAxis().transform( d[1] )
             x2= dom.plots[0].controller.dasPlot.getXAxis().transform( d[2] )
             y2= dom.plots[0].controller.dasPlot.getYAxis().transform( d[3] )
             p1= Point2D.Double( x1, y1 )
             p2= Point2D.Double( x2, y2 )
                                               
             from org.das2.util import ColorUtil
             from java.awt import BasicStroke

             g.color= ColorUtil.decodeColor('lightBlue')
             g.stroke= BasicStroke(5)
             Arrow.paintArrow( g, p2, p1, 15, Arrow.HeadStyle.DRAFTING )
             
             g.color= Color.GRAY
             g.stroke= BasicStroke(1)
             Arrow.paintArrow( g, p2, p1, 15, Arrow.HeadStyle.DRAFTING )
             
addTopDecoration( dom.plots[0], feedbackPaint )
#dom.plocanvases[0].controller.dasCanvas.addTopDecorator( FeedbackPainter() )

def reportPoints( dss ):
    'should be called from evt thread'
    tt= dss[:,0] + ( dss[:,2] - dss[:,0] ) / 2  # time mid point of each interval
    #plot( 0, tt, dss[:,1], ytitle='Y1' )
    slopesm.setDataSet( 0, 'Slope', dataset(  tt, dss[:,4] ) )
    slopesm.setDataSet( 1, 'Y2', dataset(  tt, dss[:,3] ) )
    #plot( 1, tt, dss[:,3], ytitle='Y2' )
    #plot( 2, tt, dss[:,4], ytitle='Slope' )
    
def refresh():
    'stupid call to force the plot to repaint and draw changes.  Someday this won''t be needed.'
    dom.plots[0].controller.dasPlot.invalidateCacheImage()
    dom.plots[0].controller.dasPlot.repaint()
    dss= dpr.getDataPoints()
    invokeLater( reportPoints, dss )
    
# we need to listen for updates from the DataPointRecorder, when the selection changes.
from org.das2.dataset import DataSetUpdateListener
class MyDataSetUpdateListener( DataSetUpdateListener ):
    def dataSetUpdated( self, e ):
        refresh()
        
dpr.addSelectedDataSetUpdateListener( MyDataSetUpdateListener() )

def lineSelected( ev ):
    rec= bundle( dataset(ev.startX,name='X1'), 
                 dataset(ev.startY,name='Y1'), 
                 dataset(ev.finishX,name='X2'), 
                 dataset(ev.finishY,name='Y2') )
    if ( ev.getXRange().width().value()==0 ): return
    dy= ev.finishY- ev.startY
    dx= ev.finishX- ev.startX
    if ( Units.hertz.isConvertibleTo(ev.getYRange().width().getUnits()) and 
         Units.seconds.isConvertibleTo(ev.getXRange().width().getUnits()) ):
        slope= dy.doubleValue( Units.hertz )  \
                  / dx.doubleValue( Units.seconds )
        slope= dataset( slope, units='s**-2', name='slope' )
    else:
        slope= dy.value()  \
                  / dx.value()
        slope= dataset( slope, name='slope' )
    #length= dataset(length,name='len')
    rec= bundle( rec, slope )
                  
    dpr.addDataPoint( rec )
    
    refresh()
    
mm= addMouseModule( dom.plots[0], 'digitize lines', lineSelected );

from org.das2.event import AbstractDragRenderer

class MyDragRenderer( AbstractDragRenderer ):
    def renderDrag( self, g, p1, p2 ):
        Arrow.paintArrow( g, p2, p1, 15, Arrow.HeadStyle.DRAFTING )

mm.setDragRenderer( MyDragRenderer() )
