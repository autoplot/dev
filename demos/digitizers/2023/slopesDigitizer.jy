setScriptTitle('slope digitizer')
setScriptDescription('''Demo of how a digitizer which measures slope is created.  
Reset and load the data, then run this script. click and drag to add a directed line 
segment to the digitizer tab.  This is modified to support microseconds.''')

from org.das2.components import DataPointRecorder
from org.das2.graph import Painter
from org.das2.graph import Arrow
from org.das2.graph import GraphUtil
from org.das2.qds import DataSetUtil
from org.das2.util import ColorUtil
from java.awt import BasicStroke
from java.awt.geom import Point2D
from org.das2.util import GrannyTextRenderer
from java.lang import Thread

dpr= DataPointRecorder()
dpr.setSorted(False)
dpr.setTimeFormat('$Y-$m-$dT$H:$M:$S.$(subsec;places=6)')
addTab( 'digitizer', dpr )

thinstroke= BasicStroke(1)
thickstroke= BasicStroke(3)

if dom.plotElements[0].controller.dataSet==None:
    raise Exception('Plot some spectral data first')
    
class FeedbackPainter( Painter ):
     def paint( self, g ):
         ds= dpr.getDataPoints()
         if ( ds!=None ):
             i=1
             for d in ds:
                 x1= dom.plots[0].controller.dasPlot.getXAxis().transform( d[0] )
                 y1= dom.plots[0].controller.dasPlot.getYAxis().transform( d[1] )
                 x2= dom.plots[0].controller.dasPlot.getXAxis().transform( d[2] )
                 y2= dom.plots[0].controller.dasPlot.getYAxis().transform( d[3] )
                 p1= Point2D.Double( x1, y1 )
                 p2= Point2D.Double( x2, y2 )
                 g.color= Color.GRAY
                 Arrow.paintArrow( g, p2, p1, 15, Arrow.HeadStyle.DRAFTING )
         ds= dpr.getSelectedDataPoints()
         if ( ds!=None ): 
             for d in ds:
                 x1= dom.plots[0].controller.dasPlot.getXAxis().transform( d[0] )
                 y1= dom.plots[0].controller.dasPlot.getYAxis().transform( d[1] )
                 x2= dom.plots[0].controller.dasPlot.getXAxis().transform( d[2] )
                 y2= dom.plots[0].controller.dasPlot.getYAxis().transform( d[3] )
                 p1= Point2D.Double( x1, y1 )
                 p2= Point2D.Double( x2, y2 )
                                                   
                 p11= Point2D.Double( x1+2, y1+2 )
                 p21= Point2D.Double( x2+2, y2+2 )
                 p12= Point2D.Double( x1-2, y1+2 )
                 p22= Point2D.Double( x2-2, y2+2 )
                 try:
                     g.color= ColorUtil.decodeColor('lightBlue')
                     #g.stroke= thickstroke
                     Arrow.paintArrow( g, p2, p1, 15, Arrow.HeadStyle.DRAFTING )
                     Arrow.paintArrow( g, p21, p11, 15, Arrow.HeadStyle.DRAFTING )
                     Arrow.paintArrow( g, p22, p12, 15, Arrow.HeadStyle.DRAFTING )
                     
                     g.color= Color.GRAY
                     #g.stroke= thinstroke
                     Arrow.paintArrow( g, p2, p1, 15, Arrow.HeadStyle.DRAFTING )
                 except:
                     import traceback
                     traceback.print_exc()
                     print Thread.currentThread().getName() 
                     print 'oh no' # Bug observed with Java 17 and Java 20 on Masafumi's Mac
                     
dom.canvases[0].controller.dasCanvas.addTopDecorator( FeedbackPainter() )

# we need to listen for updates from the DataPointRecorder, when the selection changes.
from org.das2.dataset import DataSetUpdateListener
class MyDataSetUpdateListener( DataSetUpdateListener ):
    def dataSetUpdated( self, e ):
        dom.canvases[0].controller.dasCanvas.repaint()
dpr.addSelectedDataSetUpdateListener( MyDataSetUpdateListener() )

def lineSelected( ev ):
    rec= bundle( dataset(ev.startX,name='X1'), # ,format='$Y-$dT$H:$M:$S.$(subsec;places=9)' TODO: Fix this), 
                 dataset(ev.startY,name='Y1',format='%.6f'), 
                 dataset(ev.finishX,name='X2'), 
                 dataset(ev.finishY,name='Y2',format='%.6f') )
    if ( ev.getXRange().width().value()==0 ): return
    
    if ( Units.hertz.isConvertibleTo(ev.getYRange().width().getUnits()) and 
         Units.seconds.isConvertibleTo(ev.getXRange().width().getUnits()) ):
        slope= ev.finishY.subtract(ev.startY).doubleValue( Units.hertz ) / ev.finishX.subtract(ev.startX).doubleValue(Units.seconds)
        slope= dataset( slope, units='s**-2', name='slope' )
    else:
        slope= ev.finishY.subtract(ev.startY).value() / ev.finishX.subtract(ev.startX).value( )
        slope= dataset( slope, name='slope' )
    #length= dataset(length,name='len')
    rec= bundle( rec, slope )
                  
    dpr.addDataPoint( rec )

mm= addMouseModule( dom.plots[0], 'digitize lines', lineSelected );

from org.das2.event import AbstractDragRenderer

xa= dom.plots[0].xaxis.controller.dasAxis
ya= dom.plots[0].yaxis.controller.dasAxis
vds= dom.plotElements[0].controller.dataSet
xds= vds.property(QDataSet.DEPEND_0)
yds= vds.property(QDataSet.DEPEND_1)


class MyDragRenderer( AbstractDragRenderer ):
    def renderDrag( self, g, p1, p2 ):
        x = xa.invTransform(p1.x)
        y = ya.invTransform(p1.y)
        i = DataSetUtil.closestIndex( xds, x )
        if yds.rank()==2:
            yds1= yds[i]
        else:
            yds1=yds
        j = DataSetUtil.closestIndex( yds1, y )
        x= xds[i]
        y= yds1[j]
        p1.x= int(xa.transform(x))
        p1.y= int(ya.transform(y))
        x = xa.invTransform(p2.x)
        y = ya.invTransform(p2.y)
        i = DataSetUtil.closestIndex( xds, x )
        if yds.rank()==2:
            yds1= yds[i]
        else:
            yds1=yds
        j = DataSetUtil.closestIndex( yds1, y )
        x= xds[i]
        y= yds1[j]
        p2.x= int(xa.transform(x))
        p2.y= int(ya.transform(y))
        Arrow.paintArrow( g, p2, p1, 15, Arrow.HeadStyle.DRAFTING )

mm.setDragRenderer( MyDragRenderer() )
