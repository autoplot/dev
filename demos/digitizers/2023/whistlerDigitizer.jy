from org.das2.components import DataPointRecorder
from org.das2.graph import Painter
from org.das2.graph import Arrow
from org.das2.graph import GraphUtil
from org.das2.graph import SeriesRenderer
from org.das2.qds import DataSetUtil
from org.das2.util import ColorUtil
from java.awt import BasicStroke
from java.awt.geom import Point2D
from org.das2.util import GrannyTextRenderer
from java.lang import Thread

dpr= DataPointRecorder()
dpr.setSorted(False)
dpr.setTimeFormat('$Y-$m-$dT$H:$M:$S.$(subsec;places=6)')
addTab( 'digitizer', dpr )

plot( 'vap+das2server:https://jupiter.physics.uiowa.edu/das/server?B&dataset=Juno/WAV/Survey&start_time=2020-07-25T07:02:00.000Z&end_time=2020-07-25T07:03:00.000Z') 

xa= dom.plots[0].xaxis.controller.dasAxis
ya= dom.plots[0].yaxis.controller.dasAxis
   
def paintWhistler( g, x1, y1, x2, y2, size ):
    print x1, y1, x2, y2
    y1= 1/sqrt(y1)
    y2= 1/sqrt(y2)
    D= (y2-y1)/(x2-x1)
    tt= linspace(x1,x2,100)
    yy= linspace(y1,y2,100)
    rend= SeriesRenderer()
    rend.setParent(dom.plots[0].controller.dasPlot)
    rend.setDataSet(dataset(tt,1/yy**2))
    rend.updatePlotImage( xa, ya, None ) 
    rend.render( g, xa, ya )
    print 'done'
    
class FeedbackPainter( Painter ):
     def paint( self, g ):
         ds= dpr.getDataPoints()
         if ( ds!=None ):
             i=1
             for d in ds:
                 x1= dom.plots[0].controller.dasPlot.getXAxis().transform( d[0] )
                 y1= dom.plots[0].controller.dasPlot.getYAxis().transform( d[1] )
                 x2= dom.plots[0].controller.dasPlot.getXAxis().transform( d[2] )
                 y2= dom.plots[0].controller.dasPlot.getYAxis().transform( d[3] )
                 p1= Point2D.Double( x1, y1 )
                 p2= Point2D.Double( x2, y2 )
                 g.color= Color.GRAY
                 paintWhistler( g, x1, y1, x2, y2, 15 ) 
         ds= dpr.getSelectedDataPoints()
         if ( ds!=None ): 
             for d in ds:
                 x1= dom.plots[0].controller.dasPlot.getXAxis().transform( d[0] )
                 y1= dom.plots[0].controller.dasPlot.getYAxis().transform( d[1] )
                 x2= dom.plots[0].controller.dasPlot.getXAxis().transform( d[2] )
                 y2= dom.plots[0].controller.dasPlot.getYAxis().transform( d[3] )
                 p1= Point2D.Double( x1, y1 )
                 p2= Point2D.Double( x2, y2 )
                                                   
                 p11= Point2D.Double( x1+2, y1+2 )
                 p21= Point2D.Double( x2+2, y2+2 )
                 p12= Point2D.Double( x1-2, y1+2 )
                 p22= Point2D.Double( x2-2, y2+2 )
                 try:
                     g.color= ColorUtil.decodeColor('lightBlue')
                     paintWhistler( g, x1, y1, x2, y2, 15 )
                 except:
                     import traceback
                     traceback.print_exc()
                     print 'oh no' # Bug observed with Java 17 and Java 20 on Masafumi's Mac
                     g.color= ColorUtil.decodeColor('lightBlue')
                     paintWhistler( g, x1, y1, x2, y2, 15 )
                     g.color= Color.GRAY
                     paintWhistler( g, x1, y1, x2, y2, 15 )
dom.canvases[0].controller.dasCanvas.addTopDecorator( FeedbackPainter() )

# we need to listen for updates from the DataPointRecorder, when the selection changes.
from org.das2.dataset import DataSetUpdateListener
class MyDataSetUpdateListener( DataSetUpdateListener ):
    def dataSetUpdated( self, e ):
        dom.canvases[0].controller.dasCanvas.repaint()
dpr.addSelectedDataSetUpdateListener( MyDataSetUpdateListener() )

def lineSelected( ev ):
    rec= bundle( dataset(ev.startX,name='X1'), # ,format='$Y-$dT$H:$M:$S.$(subsec;places=9)' TODO: Fix this), 
                 dataset(ev.startY,name='Y1',format='%.6f'), 
                 dataset(ev.finishX,name='X2'), 
                 dataset(ev.finishY,name='Y2',format='%.6f') )
    if ( ev.getXRange().width().value()==0 ): return
                      
    dpr.addDataPoint( rec )

mm= addMouseModule( dom.plots[0], 'whistler digitizer', lineSelected );

from org.das2.event import AbstractDragRenderer

vds= dom.plotElements[0].controller.dataSet
xds= vds.property(QDataSet.DEPEND_0)
yds= vds.property(QDataSet.DEPEND_1)

class MyDragRenderer( AbstractDragRenderer ):
    def renderDrag( self, g, p1, p2 ):
        x1 = xa.invTransform(p1.x)
        y1 = ya.invTransform(p1.y)
        x2 = xa.invTransform(p2.x)
        y2 = ya.invTransform(p2.y)
        
        y1= 1/sqrt(y1)
        y2= 1/sqrt(y2)
        D= (y2-y1)/(x2-x1)
        D= putProperty(D,QDataSet.UNITS,None)
        tt= linspace(x1,x2,100)
        yy= linspace(y1,y2,100)
        rend= SeriesRenderer()
        rend.setParent(dom.plots[0].controller.dasPlot)
        rend.setDataSet(dataset(tt,1/yy**2))
        rend.updatePlotImage( xa, ya, None ) 
        rend.render( g, xa, ya )

mm.setDragRenderer( MyDragRenderer() )
