setScriptTitle('whistler digitizer')
setScriptDescription('''Demo of how a digitizer which assumes a whistler 
model can be used to digitize data.''')

from org.das2.components import DataPointRecorder
from org.das2.graph import Painter
from org.das2.graph import Arrow
from org.das2.graph import GraphUtil
from org.das2.graph import SeriesRenderer
from org.das2.qds import DataSetUtil
from org.das2.util import ColorUtil
from java.awt import BasicStroke
from java.awt.geom import Point2D,Line2D
from org.das2.util import GrannyTextRenderer
from java.lang import Thread

dpr= DataPointRecorder()
dpr.setSorted(False)
dpr.setTimeFormat('$Y-$m-$dT$H:$M:$S.$(subsec;places=6)')
addTab( 'digitizer', dpr )

#ds= getDataSet('vap+das2server:https://jupiter.physics.uiowa.edu/das/server?B&dataset=Juno/WAV/Survey&start_time=2020-07-25T07:02:00.000Z&end_time=2020-07-25T07:03:00.000Z' )
plot( 'vap+das2server:https://jupiter.physics.uiowa.edu/das/server?B&dataset=Juno/WAV/Survey&start_time=2020-07-25T07:02:00.000Z&end_time=2020-07-25T07:03:00.000Z' )

xa= dom.plots[0].xaxis.controller.dasAxis
ya= dom.plots[0].yaxis.controller.dasAxis
   
def paintWhistler( g, x1, y1, x2, y2, size ):
    'paint the whistler at the data coordinates'
    yp1= 1/sqrt(y1)
    yp2= 1/sqrt(y2)
    D= (yp2-yp1)/(x2-x1)
    tt= linspace(x1,x2,100)
    yy= linspace(yp1,yp2,100)

    rend= SeriesRenderer()
    rend.setLineWidth(size)
    rend.setColor(g.color)
    rend.setParent(dom.plots[0].controller.dasPlot)
    rend.setDataSet(dataset(tt,1/yy**2))
    rend.updatePlotImage( xa, ya, None ) 
    rend.render( g.create(), xa, ya )
    
class FeedbackPainter( Painter ):
     def paint( self, g ):
         ds= dpr.getDataPoints()
         if ( ds!=None ):
             for d in ds:
                 g.color= ColorUtil.decodeColor('lightBlue')
                 paintWhistler( g, d[0], d[1], d[2], d[3], 7 ) 
         dsSelect= dpr.getSelectedDataPoints()
         print 'data points ', ds, 'selected data points ', dsSelect
         if ( dsSelect!=None ): 
             for d in dsSelect:
                 g.color= ColorUtil.decodeColor('white')
                 paintWhistler( g, d[0], d[1], d[2], d[3], 15 )
                 g.color= ColorUtil.decodeColor('lightBlue')
                 paintWhistler( g, d[0], d[1], d[2], d[3], 7 )
dom.canvases[0].controller.dasCanvas.addTopDecorator( FeedbackPainter() )

# we need to listen for updates from the DataPointRecorder, when the selection changes.
from org.das2.dataset import DataSetUpdateListener
class MyDataSetUpdateListener( DataSetUpdateListener ):
    def dataSetUpdated( self, e ):
        dom.canvases[0].controller.dasCanvas.repaint()
dpr.addSelectedDataSetUpdateListener( MyDataSetUpdateListener() )

def lineSelected( ev ):
    #yp1= 1/sqrt(y1)
    #yp2= 1/sqrt(ev.finishY)
    #D= (yp2-yp1)/(x2-x1)
    if ( ev.getXRange().width().value()==0 ): return
    if ev.startX<ev.finishX:
        x1= ev.startX
        x2= ev.finishX
        y1= ev.startY
        y2= ev.finishY
    else:
        x2= ev.startX
        x1= ev.finishX
        y2= ev.startY
        y1= ev.finishY
    rec= bundle( dataset(x1,name='X1'), # ,format='$Y-$dT$H:$M:$S.$(subsec;places=9)' TODO: Fix this), 
                 dataset(y1,name='Y1',format='%.6f'), 
                 dataset(x2,name='X2'), 
                 dataset(y2,name='Y2',format='%.6f') )                      
    dpr.addDataPoint( rec )

mm= addMouseModule( dom.plots[0], 'whistler digitizer', lineSelected );

from org.das2.event import AbstractDragRenderer

vds= dom.plotElements[0].controller.dataSet
xds= vds.property(QDataSet.DEPEND_0)
yds= vds.property(QDataSet.DEPEND_1)

class MyDragRenderer( AbstractDragRenderer ):
    def renderDrag( self, g, p1, p2 ):
        x1 = xa.invTransform(p1.x)
        y1 = ya.invTransform(p1.y)
        x2 = xa.invTransform(p2.x)
        y2 = ya.invTransform(p2.y)
        g.color= Color.GRAY
        paintWhistler(g,x1,y1,x2,y2,5)

mm.setDragRenderer( MyDragRenderer() )
