import random

setScriptDescription('''Demonstrate a robust mean, where a loose characterization of the population is used
to remove points which are obviously not part of the population we would like to characterize.  We 
calculate the infected mean of the entire population, then consider only the points which are within three sigmas
(mean average deviations) of the infected mean.''')

N= getParam('N',1000,'size of population')
Mean= getParam('mean',100,'mean of population', { 'min':50, 'max':150 } )
MAD= getParam('mad',5,'mean average deviation')
Nout= getParam('Nout',150,'number of outliers' )

# form the data
randomSeed(0)

data= randn(N) * MAD + Mean
    
iout= shuffle(indgen(len(data)))[0:Nout]

data[iout]= randn(len(iout))*3+180 

# plot the data
plot( histogram(data,0,200,2), yrange=[0,200], xrange=[0,200], fillColor='lightBlue', color='darkBlue' ) 

# echo inputs
annotation(0,text='N: %d<br>&mu;: %.1f<br>&sigma;: %.1f' % ( N, Mean, MAD ),anchorPosition='NW' )

# robust mean
m= mean( data )
annotation(1,text='simple mean',xrange=[m,m], yrange=[0,200],anchorType='data',fontSize='0.8em',
           anchorBorderType='rectangle',anchorOffset='1px,1px',anchorPosition='NW')

s= meanAverageDeviation( data )
r= where( abs( data - m ).lt( s * 3 ) )

m= mean( data[r] )
annotation(2,text='robust mean',xrange=[m,m], yrange=[0,200],anchorType='data',fontSize='0.8em',
           anchorBorderType='rectangle',anchorOffset='1px,1px')
