from org.das2.qds import JoinDataSet
from org.das2.util import ColorUtil
from java.lang.Double import NaN

def triCluster( xx, yy, xlimit, ylimit ):
    '''triCluster tags scatter data xx and yy and identifies groups of points which are within xlimit and ylimit 
of one another.  Delaunay triangulation is used to create the tessalation, and then the routine loops over the
triangles to build groups of adjacent points.
'''
    xr= datumRange(rescaleRange( extent(xx), -0.1, 1.1 ))
    yr= datumRange(rescaleRange( extent(yy), -0.1, 1.1 ))
    
    xxtri= (xx-xx[0])/xr.width()
    yytri= yy/yr.width()
    tris= triangulate(xx,yy)
    
    dsb= DataSetBuilder(2,100,2)
    for t in tris:
        dsb.nextRecord([xx[t[0]],yy[t[0]]])
        dsb.nextRecord([xx[t[1]],yy[t[1]]])
        dsb.nextRecord([xx[t[2]],yy[t[2]]])
        dsb.nextRecord([xx[t[0]],yy[t[0]]])
        dsb.nextRecord([NaN,NaN])
        
    whichGroup= replicate( -1, len(xx) )
    nextGroupId= 0
    # find the triangles within the X and Y limits
    for t in tris:
        for iside in range(3):
            i0= t[:,iside]
            i1= t[:,(iside+1)%3]
            dx= abs( xx[i0]-xx[i1] )
            dy= abs( yy[i0]-yy[i1] )
            if dx<xlimit and dy<ylimit:
                if whichGroup[i0]>-1:
                    theGroup= whichGroup[i0]
                    if whichGroup[i1]>-1 and whichGroup[i1]!=theGroup:
                        r= where( whichGroup.eq(whichGroup[i1]) )
                        whichGroup[r]= theGroup
                elif whichGroup[i1]>-1:
                    theGroup= whichGroup[i1]
                    whichGroup[i0]=theGroup
                else:
                    nextGroupId=nextGroupId+1
                    whichGroup[i0]= nextGroupId
                    whichGroup[i1]= nextGroupId
    
    jds = JoinDataSet(2)
    u= uniqValues( whichGroup, None )
    for i in xrange(len(u)):
        r= where( whichGroup.eq(u[i]) )
        jds.join(r)

    return jds
            
