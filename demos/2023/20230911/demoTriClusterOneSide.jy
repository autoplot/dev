from java.lang.Double import NaN

setScriptDescription('''Demonstrate Triangulation Clustering to find groups of points.
This version requires only one side be short.''')

xlimit= getParam( 'xlimit', 1.5 )
ylimit= getParam( 'ylimit', 1.5 )

randomSeed(0)

xx= randn(50)
yy= randn(50)
xx= append( xx, randn(50)+5 )
yy= append( yy, randn(50)+5 )

xrange= rescaleRange( extent(xx), -0.1, 1.1 )
yrange= rescaleRange( extent(yy), -0.1, 1.1 )

reset()

plot( xx,yy, renderType='scatter', symbolSize=10, xrange=xrange, yrange=yrange,  isotropic=True )

tris= triangulate(xx,yy)

whichGroup= replicate( -1, len(xx) )
nextGroupId= 0
# find the triangles within the X and Y limits
for t in tris:
    for iside in range(3):
        i0= t[:,iside]
        i1= t[:,(iside+1)%3]
        dx= abs( xx[i0]-xx[i1] )
        dy= abs( yy[i0]-yy[i1] )
        if dx<xlimit and dy<ylimit:
            if whichGroup[i0]>-1:
                theGroup= whichGroup[i0]
                if whichGroup[i1]>-1 and whichGroup[i1]!=theGroup:
                    r= where( whichGroup.eq(whichGroup[i1]) )
                    whichGroup[r]= theGroup
            elif whichGroup[i1]>-1:
                theGroup= whichGroup[i1]
                whichGroup[i0]=theGroup
            else:
                nextGroupId=nextGroupId+1
                whichGroup[i0]= nextGroupId
                whichGroup[i1]= nextGroupId

r= where( whichGroup.gt(0) )
plot( 1, xx[r], yy[r], whichGroup[r], symbolSize=10, xrange=xrange, yrange=yrange, isotropic=True,
    colorTable='apl_color_quantization' )
    
