load( PWD + 'demoapp.vap' )

platform= getParam('platform','2903326','Platform Number',['2903326','3901160'] )
tr= getParam( 'timerange', '2019', 'time range to load' )

plot( 0, 'vap+jyds:https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/110m/physical/ne_110m_coastline.zip/ne_110m_coastline.shp?script=https://github.com/autoplot/dev/blob/master/demos/2023/20230206/shapeFile.jyds' )
ds= getDataSet('https://hpfx.collab.science.gc.ca/~jmb001/Jeremy/autoplot/ARGO/$Y$m$d_prof.nc?LATITUDE&where=PLATFORM_NUMBER.eq(%s)&x=LONGITUDE&timerange=%s' % ( platform, tr ), monitor )
xr= rescaleRange( extent(xtags(ds)),-1,2 )
yr= rescaleRange( extent(ds), -1,2 )
plot( 1, ds, color='blue', xrange=xr, yrange=yr )
dom.plots[1].xaxis.range=  datumRange( rescaleRange( extent(xtags(ds)),-10,11 ) )
dom.plots[1].yaxis.range=  datumRange( rescaleRange( extent(ds),-10,11 ) )
w= newApplication('Pressure')
setApplication(w)
load( PWD + 'temperature-salinity.vap' )
setDefaultApplication()

#addTab('slice',w.getCanvas())
pres= getDataSet('https://hpfx.collab.science.gc.ca/~jmb001/Jeremy/autoplot/ARGO/$Y$m$d_prof.nc?PRES&where=PLATFORM_NUMBER.eq(%s)&timerange=%s' % ( platform, tr ) )
temp= getDataSet('https://hpfx.collab.science.gc.ca/~jmb001/Jeremy/autoplot/ARGO/$Y$m$d_prof.nc?TEMP&where=PLATFORM_NUMBER.eq(%s)&timerange=%s' % ( platform, tr ) )
psal= getDataSet('https://hpfx.collab.science.gc.ca/~jmb001/Jeremy/autoplot/ARGO/$Y$m$d_prof.nc?PSAL&where=PLATFORM_NUMBER.eq(%s)&timerange=%s' % ( platform, tr ) )

def ff(evt):
    xrange= evt.getXRange()
    yrange= evt.getYRange()
    xx= ds.property(QDataSet.DEPEND_0)
    yy= ds
    r= where( within( xx, dataset(xrange ) ).and( within( yy,dataset(yrange)) ) )
    if len(r)==0: return
    r= r[0]
    print r
    print pres, temp
    setApplication(w)
    p,_= plot( 0, dataset( reform(temp[r]), reform(pres[r]) ), title='Temperature @ %s<br>%s<br>%s' % ( platform, yy[r],xx[r] ) )
    p.yaxis.flipped=True
    p,_= plot( 1, dataset( reform(psal[r]), reform(pres[r]) ), title='Practical Salinity @ %s<br>%s<br>%s' % ( platform, yy[r], xx[r] ) )
    setDefaultApplication()
    p.yaxis.flipped=True
    
mm= addMouseModule( dom.plots[0],'plot depths',ff)
dom.plots[0].controller.dasPlot.getDasMouseInputAdapter().primaryModule= mm
