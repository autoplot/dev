from org.das2.util import ColorUtil
from java.lang import String
from gov.nasa.gsfc.spdf.cdfj import CDFDataType
from java.nio.channels import Channels
from java.nio import ByteBuffer,ByteOrder
from java.io import FileInputStream
import jarray,array

setScriptDescription('Unpack a cdf into its blocks.  This plots the cdf as colored blocks showing its components.')

resourceURI= getParam( 'resourceURI', 'https://cdaweb.gsfc.nasa.gov/pub/data/rbsp/rbspa/l4/emfisis/density/2018/rbsp-a_density_emfisis-l4_20180119_v1.5.16.cdf', 'example file to load' )

ff= getFile(resourceURI,monitor)

inputStream= FileInputStream(ff)

l= inputStream.available()

bbuf= ByteBuffer.allocate(l)
channel=Channels.newChannel(inputStream)
 
x= (channel.read(bbuf))
print x, l
if ( x<l ):
    raise Exception('didn''t get enough bytes')
    
bbuf.order(ByteOrder.BIG_ENDIAN)

print '# first 8 bytes'
for i in xrange(8):
    print '%02x' % ord(bbuf.get(i))

types= {
    1: 'CDR',
    2: 'GDR',
    3: 'rVDR',
    4: 'ADR',
    5:'AgrEDR',
    6:'VXR',
    7:'VVR',
    8:'zVDR',
    9:'AzEDR',
    10:'CCR',
    11:'CPR',
    12:'SPR',
    13:'CVVR'
}

CDR_COLOR= ColorUtil.CHOCOLATE.getRGB()
GDR_COLOR= ColorUtil.BROWN.getRGB()
ADR_COLOR= ColorUtil.MEDIUM_SLATE_BLUE.getRGB()
ZVDR_COLOR = ColorUtil.CADET_BLUE.getRGB()
VVR_COLOR= ColorUtil.decodeColor('0x408040').getRGB()
CVVR_COLOR = ColorUtil.DARK_GREEN.getRGB()
VXR_COLOR = ColorUtil.decodeColor('0x5090ff').getRGB()

def typeStr(typ):
    if typ in types:
        return types[typ]
    else:
        return '#'+str(typ)
        
def getCString( bbuf, isptr):
    'return the null-terminated string of no more than 256 characters at isptr'
    bb= jarray.zeros(256,'b')
    for j in xrange(256):
         bb[j]= bbuf.get(isptr+j)
    name= String(bb).trim()
    return name
    
def followChain( bbuf, iptr, dsb, context=None ):
   
   if (iptr==0): return # empty chain
   
   lastPointer=-1
   while (True):
       if ( iptr==lastPointer ): stop
       lastPointer=iptr
       siz= bbuf.getLong(iptr+0)
       typ= bbuf.getInt(iptr+8)
       styp= typeStr(typ)
       print styp, iptr, context
       if styp=='CDR': # CDR
           offs= bbuf.getLong(iptr+12)
           dsb.nextRecord([iptr,iptr+siz,CDR_COLOR, 'CDR'] )
           iptr= offs
       elif styp=='GDR': # GDR
           dsb.nextRecord([iptr,iptr+siz,GDR_COLOR, 'GDR'] )
           zVDRhead= bbuf.getLong(iptr+20)
           followChain( bbuf, zVDRhead, dsb )
           ADRhead= bbuf.getLong(iptr+28)
           followChain( bbuf, ADRhead, dsb )
           break
       elif styp=='ADR':
           name= getCString(bbuf,iptr+68)
           dsb.nextRecord([iptr,iptr+siz,ADR_COLOR, 'ADR: '+name] )
           adrnext= bbuf.getLong(iptr+12)
           if adrnext==0:
               break
           iptr= adrnext
       elif styp=='zVDR': # zVDR
           vdrnext= bbuf.getLong(iptr+12)
           last= bbuf.getLong(iptr+36)
           
           name= getCString(bbuf,iptr+84)
           dsb.nextRecord([iptr,iptr+siz,ZVDR_COLOR, 'zVDR:'+name] )
           vxrhead= bbuf.getLong(iptr+28)
           if vxrhead==iptr:
               stop
           followChain( bbuf, vxrhead, dsb, context=name )
           if vdrnext==0:
               break
           iptr= vdrnext
       elif styp=='VVR': # VVR
           dsb.nextRecord([iptr,iptr+siz,VVR_COLOR, 'VVR:'+context] )
           break
       elif styp=='CVVR': # CVVR
           dsb.nextRecord([iptr,iptr+siz,CVVR_COLOR, 'CVVR:'+context] )
           break
       elif styp=='VXR': # VXR
           nentries=bbuf.getInt(iptr+20)
           nusedentries=bbuf.getInt(iptr+24)
           s= 'VXR:%s uses %d of %d blocks' % ( context,nusedentries,nentries )
           dsb.nextRecord([iptr,iptr+siz,VXR_COLOR, s ] )
           for j in xrange(nusedentries):
               ptr= bbuf.getLong(iptr+28+8*nentries+j*8)
               followChain( bbuf, ptr, dsb, context=context+' block '+str(j) )
           break

dsb= DataSetBuilder(2,100,4)
iptr= 8

followChain( bbuf, iptr, dsb )

plot( dsb.getDataSet() )
