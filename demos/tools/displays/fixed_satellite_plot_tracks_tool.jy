from org.autoplot import RenderType
from org.das2.util import ColorUtil,LoggerManager
from java.lang.Double import NaN

setScriptTitle( 'Spacecraft Position Plotter' )
setScriptDescription('''Spacecraft orbit plotter that uses the HELIO1DAY files at CDAWEB to locate spacecraft.  The orbits are drawn on 
top of a Parker Spiral where the solar wind speed can be controlled.''')

logger= LoggerManager.getLogger('aaa')
logger.info('Logging to aaa')

# variable name, label, cdaweb variable
xx= [ 'stereoa','Stereo A','STA', 'red',
      'stereob', 'Stereo B','STB','blue',
      'psp', 'Parker Solar Probe', 'PSP', 'black',
      'messenger','Messenger','MESSENGER', 'orange',
      'earth', 'Earth', 'EARTH', 'green',
      'thb', 'Themis B', 'THB', 'purple',
      'thc', 'Themis C', 'THC', 'pink',
      'juno', 'Juno', 'JUNO', 'saddleBrown',
      'bepi', 'BepiColombo', 'BEPICOLOMBO', 'teal',
      'cassini', 'Cassini', 'CASSINI', 'yellow',
      'galileo', 'Galileo', 'GALILEO', 'peach',
      'mercury', 'Mercury', 'MERCURY', 'magenta',
      'venus', 'Venus', 'VENUS', 'dark green',
      'mars', 'Mars', 'MARS', 'light grey',
      'voyager1', 'Voyager1', 'VOYAGER1', 'indigo',
      'voyager2', 'Voyager2', 'VOYAGER2', 'deep pink',
    ]
scs= xx[0::4]
lbs= xx[1::4]
cdw= xx[2::4]
colors= xx[3::4]

tr= getParam( 'timerange', '2011-10-20T00:00/2011-10-28T00:00', 'timerange to load' )

TF= [ True, False ]

stereoa=    getParam( scs[0], False, lbs[0], TF)
stereob=    getParam( scs[1], False, lbs[1], TF)
psp=        getParam( scs[2], False, lbs[2], TF)
messenger=  getParam( scs[3], False, lbs[3], TF)
earth=      getParam( scs[4], False, lbs[4], TF )
thb =       getParam( scs[5], False, lbs[5], TF )
thc =       getParam( scs[6], False, lbs[6], TF )
juno =      getParam( scs[7], False, lbs[7], TF )
bepi =      getParam( scs[8], False, lbs[8], TF )
cassini =   getParam( scs[9], False, lbs[9], TF )
galileo =   getParam( scs[10], False, lbs[10], TF )
mercury =   getParam( scs[11], False, lbs[11], TF )
venus =     getParam( scs[12], False, lbs[12], TF )
mars =      getParam( scs[13], False, lbs[13], TF )
voyager1 =  getParam( scs[14], False, lbs[14], TF )
voyager2 =  getParam( scs[15], False, lbs[15], TF )

vel_wind=  getParam( 'velwind', 500, 'solar wind velocity in km/s' )

doPlot= [ stereoa, stereob, psp, messenger, earth, thb, thc, juno, bepi, cassini, galileo, mercury, venus, mars, voyager1, voyager2 ]

setLayoutOverplot( 2 + sum(doPlot) ) 
dom.options.canvasFont= 'roboto-12'

print 'Number of plot elements: '+str(sum(doPlot)+1)

sun= circle(0)
p,_= plot( 1, sun, symbolSize= 10, 
           xrange=[-2,2], yrange=[-2,2], isotropic = True )
p.xaxis.flipped= True
p.yaxis.flipped= True

# calculate a data set to represent the Parker spiral
vel_wind = ( vel_wind / 150e6 ) * 24. * 60. * 60. # AU per day

rot_sun = toRadians( 14.4 ) # rotation rate of the Sun
theta_spiral = toRadians( -findgen( 360 * 6 ) )

r_spiral = -( vel_wind / rot_sun ) * theta_spiral
r_spiral = putProperty( r_spiral, QDataSet.UNITS, None )
foot_points = toRadians( [ -150, -120, -90, -60, -30, 0, 30, 60, 90, 120, 150, 180 ] )

np1= len(r_spiral)+1

spir_x= zeros( np1 * len(foot_points) )
spir_y= zeros( np1 * len(foot_points) )

per_lon= 0
for j in xrange(len(foot_points)):
    spir_x_1= r_spiral * cos( theta_spiral + per_lon + foot_points[j] )
    spir_y_1= r_spiral * sin( theta_spiral + per_lon + foot_points[j] )
    spir_x[1+j*np1:(j+1)*np1]= spir_x_1
    spir_y[1+j*np1:(j+1)*np1]= spir_y_1
    spir_x[(j)*np1]= NaN
    spir_y[(j)*np1]= NaN
plot( 0, spir_x, spir_y, color=ColorUtil.DARK_GRAY, lineStyle = 'dotfine', isotropic=True )

# plot each of the s/c targets         
iplot=2
for i in xrange( len( scs ) ):
    
    if ( doPlot[i]==False ): continue
        
    cdawebId= '%s_HELIO1DAY_POSITION' % cdw[i]
    print cdawebId
    
    sc_lon= getDataSet('vap+cdaweb:ds=%s&id=SE_LON' % cdawebId, tr )
    
    if ( sc_lon==None ): 
        logger.warning( 'No data found for '+cdawebId )
        continue
    
    print 'vap+cdaweb:ds=%s&id=RAD_AU'% cdawebId, tr
    sc_rad = getDataSet('vap+cdaweb:ds=%s&id=RAD_AU'% cdawebId, tr )
    
    # These files have VALID_MAX set to 2020-01-01, and this needs to be cleared.
    tt= sc_rad.property( QDataSet.DEPEND_0 )
    tt.putProperty( QDataSet.VALID_MAX, None )
    sc_rad.putProperty( QDataSet.DEPEND_0, tt )
    sc_lon.putProperty( QDataSet.DEPEND_0, tt )
    
    if ( True ):
        logger.info('trimming tags for non-monotonic data')
        
        tt= xtags(sc_lon)   
        r= where( valid(tt) )
        sc_lon= sc_lon[r]
        sc_rad= sc_rad[r]
        
        tt= xtags(sc_lon)   
        
        logger.info('tt: '+str(tt))
        
        r= where( diff(tt).le(0) )
        if ( len(r)>0 ):
            logger.warning( 'trimming data to make monotonic, to %d' % r[0] )
            sc_lon= sc_lon[0:r[0]]
            sc_rad= sc_rad[0:r[0]]
        
    sc_lon = trim(sc_lon, tr)
    sc_rad = trim(sc_rad, tr) 

    sc_lon = toRadians( sc_lon )
            
    x_sc = sc_rad * sin(sc_lon)
    y_sc = sc_rad * cos(sc_lon)
    
    x_sc= putProperty( x_sc, QDataSet.UNITS, None )
    y_sc= putProperty( y_sc, QDataSet.UNITS, None )
    
    plot( iplot, y_sc, x_sc, 
        color = colors[i],  
        #legendLabel = lbs[i], 
        renderType = 'orbitPlot>tickDirection=right' )
    
    annotation( iplot-2, text=lbs[i], xrange=extent(y_sc), yrange=extent(x_sc),
        background=None, anchorPosition='outsideNE' )
     
    iplot= iplot+1
