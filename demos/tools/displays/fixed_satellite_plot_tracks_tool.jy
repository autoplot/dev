from org.autoplot import RenderType
from org.das2.util import ColorUtil,LoggerManager
setScriptDescription('Spacecraft Orbit plotter that uses the HELIO1DAY files at CDAWEB to locate spacecraft.')

logger= LoggerManager.getLogger('aaa')

TF= [ True, False ]

# variable name, label, cdaweb variable
xx= [ 'stereo','Stereo','STA',
      'psp', 'Parker Solar Probe', 'PSP', 
      'messenger','Messenger','MESSENGER',
      'earth', 'Earth', 'EARTH',
      'thb', 'Themis B', 'THB',
      'thc', 'Themis C', 'THC',
      'juno', 'Juno', 'JUNO'
    ]
scs= xx[0::3]
lbs= xx[1::3]
cdw= xx[2::3]

colors= ColorUtil.getNamedColors().keySet().toArray()

tr= getParam( 'timerange', '2011-10-20 T00:00 to 2011-10-28T00:00', 'timerange to load' )

stereo=     getParam( scs[0], False, lbs[0], TF)
psp=        getParam( scs[1], False, lbs[1], TF)
messenger=  getParam( scs[2], False, lbs[2], TF)
earth=      getParam( scs[3], False, lbs[3], TF )
thb =       getParam( scs[4], False, lbs[4], TF )
thc =       getParam( scs[5], False, lbs[5], TF )
juno =      getParam( scs[6], False, lbs[6], TF )

reset()

doPlot= [ stereo, psp, messenger, earth, thb, thc, juno ]

setLayoutOverplot( sum(doPlot)+1 )

sun= circle(0)
plot( 0, sun, symbolSize= 10, xrange=[-2,2], yrange=[-2,2], isotropic = True )


for i in xrange( len( scs ) ):
    
    if ( doPlot[i]==False ): continue
        
    cdawebId= '%s_HELIO1DAY_POSITION' % cdw[i]
    sc_lon= getDataSet('vap+cdaweb:ds=%s&id=SE_LON' % cdawebId, tr )
    
    if ( sc_lon==None ): 
        logger.warning( 'No data found for '+cdawebId )
        continue
    
    sc_rad = getDataSet('vap+cdaweb:ds=%s&id=RAD_AU'% cdawebId, tr )
    
    print cdawebId, 'JUNO_HELIO1DAY_POSITION' 
    if ( True ):
        logger.fine('trimming tags for non-monotonic data')
        tt= xtags(sc_lon)   
        r= where( diff(tt).le(0) )
        if ( len(r)>0 ):
            sc_lon= sc_lon[0:r[0]]
            sc_rad= sc_rad[0:r[0]]
        
    sc_lon = trim(sc_lon, tr)
    sc_rad = trim(sc_rad, tr) 

    sc_lon = toRadians( sc_lon )
            
    x_sc = sc_rad * sin(sc_lon)
    y_sc = sc_rad * cos(sc_lon)
    
    plot( i+1, x_sc, y_sc, 
        color = colors[i],  
        legendLabel = lbs[i], 
        renderType = RenderType.orbitPlot)

