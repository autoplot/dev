from java.lang import ProcessBuilder
from java.awt import FlowLayout
from java.io import File
from javax.swing import JOptionPane,JPanel,JLabel,JTextField,BoxLayout,ImageIcon
from org.das2.util.filesystem import FileSystem
from org.das2.util import LoggerManager
from org.autoplot.datasource import AutoplotSettings

print '****'
print 'This is clone.jy, an editor action.'

setScriptTitle('Git Clone')
setScriptDescription('Run the git clone command.  This assumes that the git commands are available at the command line.')

logger= LoggerManager.getLogger('jython.actions')

script= getApplication().getScriptPanel().getFilename()
localCacheDir= str(FileSystem.settings().localCacheDir)

gitRemote=''
if ( script!=None and script.startswith(localCacheDir) ):
    ldir= script[(len(localCacheDir)+1):]
    i2= ldir.find('main')
    if ( i2==-1 ):
        i2= ldir.find('master')
    if i2>-1:
        host= ldir[0:i2]
        i=host.find('/')
        gitRemote= host[0:i]+':/'+host[i:]

autoplotData= AutoplotSettings.settings().resolveProperty( AutoplotSettings.PROP_AUTOPLOTDATA )

dia= JPanel()
dia.setLayout( BoxLayout( dia, BoxLayout.Y_AXIS ) )
dia.add( JLabel( 'Clone Repository:') )
repoTF= JTextField(gitRemote,40)

dia.add( repoTF )
dia.add( JLabel( 'Local Folder:' ) )
localFile= JTextField(40)
dia.add( localFile )
dia.add( JLabel( '<html><em>This will create the repository folder within the local folder.' ) )

icon= ImageIcon( URL( PWD + 'Git-Icon-1788C_48px.png' ) )
target= JOptionPane.showConfirmDialog(getApplication(),dia,'Clone Repo',JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,icon)

if ( target==JOptionPane.CANCEL_OPTION ):
    setStatus( 'git clone cancelled.' )
    
elif( target==JOptionPane.OK_OPTION ):
    exe= 'git clone '+ repoTF.text

    setStatus( "busy: executing clone" )

    pb= ProcessBuilder(exe.split(' '))
    if ( not File( localFile.text ).mkdirs() ):
        logger.warning("unable to mkdirs")
        
    pb.directory( File( localFile.text ) )

    log= File( autoplotData, 'log' )
    log= File( log, 'editor.clone.txt' )

    pb.redirectErrorStream(True)
    pb.redirectOutput( ProcessBuilder.Redirect.to(log) )

    p= pb.start()
    status= p.waitFor()

    from org.das2.util import FileUtil
    msg= FileUtil.readFileToString( log )
    showMessageDialog(msg)

    if status==0:
        showMessageDialog('See local clone, '+repoTF.text )
        
    setStatus( "Clone complete, see " + str(log) )
    
    if JOptionPane.OK_OPTION==JOptionPane.showConfirmDialog( getApplication(),'Also link to remote?' ):
        getApplication().runScriptTools( PWD + 'linkToUpstream.jy' )

