setScriptTitle('Demo Keypress Mouse Module')
setScriptDescription('''This shows how a mouse module can accept key presses.  This is way to hard, 
but it can be done''')

p= dom.plots[0].controller.dasPlot

from org.das2.event import LabelDragRenderer,BoxSelectorMouseModule

key=''

def paint( g, x, y ):
    from java.awt import RenderingHints
    g.setRenderingHint( RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON )
    global key
    if ( key=='' ):
        g.fill( Ellipse2D.Double( x-15, y-15, 30, 30 ) )
    else:
        g.draw( Ellipse2D.Double( x-15, y-15, 30, 30 ) )
        g.drawString( key, x, y )
    
from java.awt.geom import Ellipse2D
class MyDragRenderer( LabelDragRenderer ):
    def renderDrag( self, g, p1, p2 ):
        setStatus("p2="+str(p2))
        paint( g, p2.x, p2.y )
        
class MyBoxMouseModule( BoxSelectorMouseModule ):
    def __init__( self, p, label ):
        BoxSelectorMouseModule.__init__(self,
            p,
            p.getXAxis(),
            p.getYAxis(),
            None,
            MyDragRenderer(p),
            label )
    def keyPressed( self, ke ):
        setStatus("keypress "+ke.getKeyChar() )
        global key
        key= ke.getKeyChar()
        p.repaint()
        
mm= MyBoxMouseModule( p, 'Custom Drag Renderer' )

dragRenderer= MyDragRenderer(p)

mm.setDragRenderer( dragRenderer )

from org.das2.event import BoxSelectionListener
class MyBoxSelectionListener(BoxSelectionListener):
    def boxSelected(self,evt):
        print evt, '*****'
        setStatus("boxSelected")
    
mm.addBoxSelectionListener(MyBoxSelectionListener())

p.dasMouseInputAdapter.primaryModule= mm
