setScriptTitle('Feather Plot Demo')
setScriptDescription('''Shows a custom renderer which plots arrows of lengths dx,dy at points x,y.  In this demo
   ACE magnetometer data is positioned on fake orbit data.''')

reset()

from org.das2.graph import Arrow

t= timegen( '2017-10-01T4:50', '60s', 1600 )
x= cos( (t-'2017-10-01T4:50')/'5hr' ) 
y= sin( (t-'2017-10-01T4:50')/'5hr' ) * linspace( 1,1.2,1600 )
x= link( t,x )
y= link( t,y )

#plot( bundle( t,x,y ), renderType='orbitPlot' )

mag= getDataSet('vap+cdaweb:ds=AC_K0_MFI&id=BGSEc','2017-10-01T5:00/6:00')
t2= mag.property( QDataSet.DEPEND_0 )
print mag

(mag,x,y)= synchronize(t2,(mag,x,y))

#plot( 1, mag )
#plot( 2, x )
#plot( 3,y )

dx= putProperty( mag[:,0], QDataSet.UNITS, Units.dimensionless )
dy= putProperty( mag[:,1], QDataSet.UNITS, Units.dimensionless )
featherDs= bundle( x, y, dx, dy )
featherDs= link( t2, featherDs )

# the following two lines make it so that we can complete on "g"

from org.das2.graph import Renderer
from java.awt.image import BufferedImage
from java.awt import Point

bi= BufferedImage(640,480,BufferedImage.TYPE_INT_ARGB)
g= bi.getGraphics()

class FeatherRenderer( Renderer ):
    def __init__(self,scale=1):
        self.scale= scale
        
    def doAutorange( self, ds ):
        dx= ds[:,2]*self.scale 
        xr= extent( ds[:,0]+dx )
        dy= ds[:,3]*self.scale
        yr= extent( ds[:,1]+dy )
        bds= join(rescaleRange(xr,-0.1,1.1),rescaleRange(yr,-0.1,1.1))
        return bds
   
    def render( self, g, xaxis, yaxis ):
        ds= self.getDataSet()
        for i in xrange(ds.length()):
            x0= int(xaxis.transform( ds[i,0],xaxis.getUnits() ))
            y0= int(yaxis.transform( ds[i,1],yaxis.getUnits() ))
            x1= int(xaxis.transform( ds[i,0]+ds[i,2]*self.scale,xaxis.getUnits() ))
            y1= int(yaxis.transform( ds[i,1]+ds[i,3]*self.scale,yaxis.getUnits() ))
            Arrow.paintArrow(g,Point(x1,y1),Point(x0,y0),4,Arrow.HeadStyle.DRAFTING)

plot( featherDs, renderer= FeatherRenderer(0.03) )
