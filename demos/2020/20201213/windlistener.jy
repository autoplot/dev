from javax.swing import JCheckBox
from org.das2.datum import TimeUtil
from org.das2.graph import Renderer
from java.awt.geom import GeneralPath,Rectangle2D
from org.json import JSONObject
import jarray
from java.net import DatagramSocket,DatagramPacket
from java.lang import String

BUF_LEN=2048
# port of Tempest
PORT=50222

arrow= GeneralPath()
arrow.moveTo(-20,-10)
arrow.lineTo(0,30)
arrow.lineTo(20,-10)
arrow.lineTo(0,0)
arrow.closePath()

class WindRenderer( Renderer ):
    def render( self, g, xaxis, yaxis ):
        ds= self.getDataSet()
        if ( ds==None ): return
        for d in ds:
            ix= xaxis.transform( d[0] )
            iy= yaxis.transform( d[1] )
            ang= toRadians( d[2] )
            g.fill( Rectangle2D.Double( ix-3, iy, 6, yaxis.transform(0,yaxis.units)-iy ) )
            g2= g.create()
            g2.translate( ix, yaxis.transform(yaxis.dataMaximum)+20 )
            g2.rotate( float(ang) )
            s= min( sqrt( float(d[1]) ) / 4.0, 20 )
            g2.scale( s,s )
            g2.fill( arrow )

setLayout( 4 )
dom.options.autoranging= False

plot( 0, None, renderer= WindRenderer(), xrange=DatumRangeUtil.parseTimeRange('PT3M'), yrange=[0,10] )
plot( 1, None, xrange=DatumRangeUtil.parseTimeRange('PT30M'), yrange=[0,10] )
plot( 2, None, xrange=DatumRangeUtil.parseTimeRange('PT30M'), yrange=[0,10] )
plot( 3, None, xrange=DatumRangeUtil.parseTimeRange('PT30M'), yrange=[0,10] )
        
dsb= DataSetBuilder(2,100,3)
dsbv= DataSetBuilder(2,100,4)

mphu= Units.lookupUnits('mph')

collectCB= JCheckBox('Collect Data',selected=True)
getApplication().setBottomPanel(collectCB)

while collectCB.selected:
    buf= jarray.zeros(BUF_LEN,'b')
    
    socket= DatagramSocket(PORT)
    
    packet = DatagramPacket(buf, BUF_LEN)
    socket.receive(packet)
    
    msg= String(packet.getData(), 0, packet.getLength())
    
    json= JSONObject(msg)
    typ= json.getString('type')
    print typ
    
    if typ=='rapid_wind':
        ob= json.getJSONArray('ob')
        dsb.nextRecord( [ Units.t1970.createDatum(ob.getDouble(0)), 
            dataset( ob.getDouble(1)*2.23694, units='mph' ), 
            dataset( ob.getDouble(2), units='degrees' ) ] )
        plot( 0, dsb.getDataSet(), renderer= WindRenderer(), xrange=DatumRangeUtil.parseTimeRange('PT3M'), yrange=[0,10] )
    elif typ=='obs_st':
        print '####'
        obs= json.getJSONArray('obs')
        ob= obs.getJSONArray(0) 
        dsbv.nextRecord( [ Units.t1970.createDatum(ob.getDouble(0)), 
            dataset( ob.getDouble(7)*9/5.+32, units='degF', label='Temperature' ), 
            dataset( ob.getDouble(6), label='Station Pressure' ), 
            dataset( ob.getDouble(16), label='Battery (V)' ) ] )
        dss= dsbv.getDataSet()
        plot( 1, dss[:,1], xrange=DatumRangeUtil.parseTimeRange('PT30M') )
        plot( 2, dss[:,2], xrange=DatumRangeUtil.parseTimeRange('PT30M') )
        plot( 3, dss[:,3], xrange=DatumRangeUtil.parseTimeRange('PT30M') )
    
    if socket!=None:
        socket.close()
        
if socket!=None:
    socket.close()
