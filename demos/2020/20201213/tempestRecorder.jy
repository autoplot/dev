from org.das2.util import LoggerManager
from java.io import File
from org.das2.util.filesystem import FileSystem
from org.das2.fsm import FileStorageModel
setScriptDescription( '''Listen for UDP packets broadcast by the WeatherFlow 
Tempest Weather Station, and record them to orderly files.  This is intended
to be used as long-running process.  This can be run like so:
java -jar /home/jbf/bin/autoplot.jar --headless https://github.com/autoplot/dev/blob/master/demos/2020/20201213/tempestRecorder.jy
''' )

device= getParam( 'device', '34803', 'Unique ID assigned to each device' )
dataHome= getParam( 'dataHome', '/home/jbf/data/tempest/%s/' % device )

from org.das2.datum import TimeUtil
from org.das2.graph import Renderer
from java.awt.geom import GeneralPath,Rectangle2D
from org.json import JSONObject, JSONArray
import jarray
from java.net import DatagramSocket,DatagramPacket
from java.lang import String

logger= LoggerManager.getLogger('tempest')

# port of Tempest
PORT=50222        
# allow Tempest packets to be 2048 bytes long.
BUF_LEN=2048

# We use an external library to handle the naming of files where the data is stored.
lib= 'https://github.com/hapi-server/uri-templates/raw/master/UriTemplatesJava/store/UriTemplatesJava.jar'
doc= 'https://jfaden.net/~jbf/javadoc/uri-templates/'
import sys
addToSearchPath( sys.path,lib,doc,monitor ) # caution: this only loads once!!!!!

fs= dataHome
from org.hapiserver import URITemplate
fsmwind = URITemplate('$Y/$m/%s.wind.$Y$m$d.csv' % device )
fsmobs= URITemplate('$Y/$m/%s.obs.$Y$m$d.csv' % device )

def recordRapidWind( json ):
    ob= json.getJSONArray('ob')
    t= datum( Units.t1970.createDatum(ob.getDouble(0)) ) 
    tstr= str(t)
    fln= File( fs + fsmwind.format( tstr,tstr ) )
    pfln= fln.getParentFile()
    if not pfln.exists():
        pfln.mkdirs()
    if fln.exists():
        f= open( str(fln), 'a+' )
    else:
        f= open( str(fln), 'w' )
        f.write( 'time,speed(mph),direction(degrees)\n' )
    if  ob.length()!=3:
        logger.info("fail to get temp ")
    else:
        f.write( '%s,%.2f,%.1f\n' % ( tstr,
                          ob.getDouble(1)*2.23694, 
                          ob.getDouble(2) ) )
    f.close()
    
def recordObsSt( json ):
    ob= json.getJSONArray('obs')
    ob= ob.getJSONArray(0) # very annoying
    assert isinstance( ob, JSONArray )
    t= datum( Units.t1970.createDatum(ob.getDouble(0)) ) 
    tstr= str(t)
    fln= File( fs + fsmobs.format( tstr,tstr ) )
    pfln= fln.getParentFile()
    if not pfln.exists():
        pfln.mkdirs()
    if fln.exists():
        f= open( str(fln), 'a+' )
    else:
        f= open( str(fln), 'w' )
        f.write( 'time,windLull(mph),windAvg(mph),windGust(mph),windDirection(degrees),')
        f.write( 'stationPressure(MB),airTemperature(Fahrenheit),relativeHumidity(%),')
        f.write( 'illuminance(Lux),UV(Index),solarRadiation(W/m^2),')
        f.write( 'precipAccumulated(mm),precipType,lightningAvgDistance(km),lightingCount,' )
        f.write( 'battery\n' )
    if ( ob.length()!=18 ):
        logger.info("fail to get temp")
    else:
        f.write( '%s,%.2f,%.2f,%.2f,%.1f,' % ( str(t), ob.getDouble(1)*2.23694, ob.getDouble(2)*2.23694, ob.getDouble(3)*2.23694, ob.getDouble(4) ) )
        f.write( '%.1f,%.1f,%.1f,' % ( ob.getDouble(6), ob.getDouble(7)*9/5.+32, ob.getDouble(8) ) )
        f.write( '%.1f,%.1f,%.1f,'% ( ob.getDouble(9), ob.getDouble(10), ob.getDouble(11) ) )
        f.write( '%.1f,%.2f,%.1f,%.1f,' % ( ob.getDouble(12), ob.getDouble(13), ob.getDouble(14), ob.getDouble(15) ) )
        f.write( '%.2f\n' % ( ob.getDouble(16) ) )
    f.close()
                          
while True:
    buf= jarray.zeros(BUF_LEN,'b')
    
    socket= DatagramSocket(PORT)
    
    packet = DatagramPacket(buf, BUF_LEN)
    socket.receive(packet)
    
    socket.close()

    msg= String(packet.getData(), 0, packet.getLength())
    logger.fine(msg)
    
    json= JSONObject(msg)
    typ= json.getString('type')
    
    if typ=='rapid_wind':
        recordRapidWind( json )
    elif typ=='obs_st':
        recordObsSt( json )
        pass
            
if socket!=None:
    socket.close()
