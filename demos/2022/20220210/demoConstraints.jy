
print params
_paramMap= {}
_paramSort= []

def getParam( name, deflt, doc='', constraint='' ):
  """<html>get the parameter from the URI<ul>
<li>name is the name of the input parameter.
<li>deflt is the default value for the input parameter.
<li>doc is any documentation for the parameter.
<li>constraint is used to declare any constraints, presently one of: a list of enumerated values, or a dictionary with 'min', 'max', or 'values'<ul>
"""
  if ( type(name).__name__=='int' ):
     name= 'arg_%d' % name
  _paramMap[ name ]= [ name, deflt, doc, constraint ]
  _paramSort.append( name )
  if type(params) is dict:
     if params.has_key(name): 
         t= type(deflt)  # Ed demonstrated this allows some pretty crazy things, e.g. open file, so be careful...
         result=t(params[name]) 
         if isinstance( constraint, dict ):
             if constraint.has_key( 'min' ):
                 if result<constraint['min']:
                     raise Exception('param '+name+' is below minimum allowed value '+str(constraint['min']))
             if constraint.has_key( 'max' ):
                 if result>constraint['max']:
                     raise Exception('param '+name+' is above maximum allowed value '+str(constraint['max']))
                     result= constraint['max']
             if constraint.has_key( 'values' ):
                 values= constraint['values']
                 try:
                     _= values.index(result)
                 except:
                     raise Exception('param '+name+' is not found in allowed values' )
             if constraint.has_key( 'regex' ):
                 regex= constraint['regex']
                 from java.util.regex import Pattern
                 p= Pattern.compile(regex)
                 if not p.matcher(str(result)).matches():
                     raise Exception('param '+name+' does not match regex ' + str(regex) )
         return result
     else:
         return deflt
  else:
     print 'in jython script, variable params was overriden.'
     return deflt
     
setScriptDescription('Demo and experiment with constraints on parameters.')

ii= getParam( 'ii', 1, 'integer value, 5 would break the machine', { 'min':1, 'max':4 } )
ee1= getParam( 'ee1', 'sc-b', 'enum value', ['sc-a','sc-b'] )
ee2= getParam( 'ee2', 'sc-b', 'enum value', { 'values':['sc-a','sc-b'] } )
ss= getParam( 'ss', 'alpha', 'regex constraint', { 'regex':'alpha|beta' } )

print ii
print ee1
print ee2
print ss

