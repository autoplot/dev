# project taken from sftp://nudnik.physics.uiowa.edu/home/jbf/project/galileo/study/20170125/jnlpToJumboJar.jy
# unpack javaws application into a single-jar file.

from java.io import File,FileOutputStream
import re                       
                
setScriptDescription('''This tool will download the jnlp specification and use it to create a single jar
(aka "jumbojar") file.  Each jar is loaded and minor corrections made to META_INF.  NOTE THIS
WILL OFTEN NOT WORK, as only some jnlp files would support a jumbojar.''')
setScriptTitle('Make jumbojar')

doc= { 'examples':[ 'file:/home/jbf/tmp/MarsisIonogramSurvey.jnlp','http://space.physics.uiowa.edu/plasma-wave/marsx/webstart/MarsisIonogramSurvey.jnlp'] }
resourceURI= getParam( 'resourceURI', 'file:/home/jbf/tmp/MarsisIonogramSurvey.jnlp', 'jnlp file', doc )
defaultName=  re.search('.*\/(.*)\.jnlp',resourceURI ).group(1)
jarFileOut= getParam( 'jarFileOut', defaultName+'.jar' )

# unjar the jar file. See http://www.programcreek.com/2012/08/unzip-a-jar-file-in-java-program/
def unzipJar( jarFile, destinationDir ):
    from java.util.jar import JarFile,JarEntry
    jar= JarFile(jarFile)
    
    for entry in jar.entries():
        fileName = destinationDir.toString() + File.separator + entry.getName()
        f = File(fileName)

        if ( fileName.endswith("/") ):
            f.mkdirs();
                
        #now create all files
    for entry in jar.entries():
        fileName = destinationDir.toString() + File.separator + entry.getName()
        f = File(fileName)

        if ( not fileName.endswith("/") ) :
            ins = jar.getInputStream(entry)
            fos = FileOutputStream(f)
 
                        # write contents of 'is' to 'fos'
            while (ins.available() > 0) :
                fos.write(ins.read())

            fos.close();
            ins.close();

#def zipJar( jarFile, sourceDir ):
#    from java.io import URI
#    from java.util import HashMap
#    from java
#    env = HashMap()
#    env.put("create", "true")
#    uri = URI.create("jar:file:/tmp/zipfstest.zip");
#    zipfs = FileSystems.newFileSystem(uri, env)

x= URI(resourceURI)

from javax.xml.parsers import DocumentBuilderFactory
from javax.xml.xpath import XPath
from javax.xml.xpath import XPathExpressionException
from javax.xml.xpath import XPathFactory
from javax.xml.xpath import XPathConstants
from org.xml.sax import InputSource
from java.io import FileInputStream

monitor.started()

f= getFile( resourceURI, monitor.getSubtaskMonitor('get jnlp') )
myin= FileInputStream( f )

docBuilder= DocumentBuilderFactory.newInstance()
docBuilder.setValidating(False)  # doesn't work, still checks.  Had to download the jnlp and remove reference.
docBuilder.setNamespaceAware(False) 

builder = docBuilder.newDocumentBuilder()
source = InputSource( myin )

initialDocument = builder.parse(source)

factory= XPathFactory.newInstance()
xpath= factory.newXPath()

codebase= xpath.evaluate( '/jnlp/@codebase', initialDocument, XPathConstants.NODE )
codebase= re.search('\"(.*)\"',codebase.toString()).group(1)

codebaseUrl= URL(codebase)
jars= xpath.evaluate( '/jnlp/resources/jar/@href', initialDocument, XPathConstants.NODESET )
mainClass= xpath.evaluate( '/jnlp/application-desc/@main-class', initialDocument, XPathConstants.NODE )
args= xpath.evaluate( '/jnlp/application-desc/argument[*]/text()', initialDocument, XPathConstants.NODE )

print '# The JNLP file'
print resourceURI
print 'codebase: ', codebase
print 'args: ', args
print ''

print '# main-class'
print mainClass
print ''

mkdir('/tmp/ap/jnlpToJar/')
outf= File( '/tmp/ap/jnlpToJar/' )

print '# Output'
print outf
print ''

print '# jars'

monitor.setTaskSize( jars.getLength() )
for i in range( jars.getLength() ):
   value = jars.item(i).toString()  # how to unpack this!?!?!?
   print '* ', value
   v= re.search('\"(.*)\"',value).group(1)
   if ( monitor.isCancelled() ):  raise Exception("cancel pressed")
   monitor.setTaskProgress(i)
   print '  * download ', URL( codebaseUrl, v )
   try:
       jarf= getFile( URL( codebaseUrl, v ), monitor.getSubtaskMonitor(i,i+1,v) )
       unzipJar( jarf, outf )
   except:
       'Unable to find ', URL( codebaseUrl, v )
   
print ''

# re-write the manifest
mainClass= re.search('\"(.*)\"',mainClass.toString()).group(1)
mkdir('/tmp/ap/jnlpToJar/META-INF/')
f= open( outf.toString()+'/META-INF/MANIFEST.MF', 'w' )
f.write( 'Manifest-Version: 1.0\n' )
f.write( 'Main-Class: '+mainClass + '\n' )
f.write( 'X-CreatedBy: jnlpToJumboJar\n' )
f.close()


# now rejar everthing
from org.das2.util.filesystem import FileSystemUtil,Glob
FileSystemUtil.deleteAllFiles( File(outf,'META-INF'), Glob.getRegex( '*.DSA' ) )
FileSystemUtil.deleteAllFiles( File(outf,'META-INF'), Glob.getRegex( '*.SF' ) )
FileSystemUtil.zip(File(jarFileOut),outf)

print '# The output'
print 'wrote '+File(jarFileOut).getAbsolutePath()
print 'java -cp '+str(File(jarFileOut).getAbsolutePath())+' '+mainClass + ' ' + str(args)
#print '** Now execute: **'
#print 'cd '+outf.toString()
#print 'rm -f META-INF/*.DSA'
#print 'rm -f META-INF/*.SF'
#print 'jar cmf META-INF/MANIFEST.MF /tmp/'+ jarFileOut + ' *'
