from org.das2.components.propertyeditor import PropertyEditor
from javax.swing.event import MouseInputAdapter
from java.util import HashMap
from java.lang import Math
from com.itextpdf.text import Rectangle
from java.beans import PropertyChangeListener
from org.das2.graph import DasCanvas
from org.das2.util import ColorUtil
from java.awt.geom import Rectangle2D,AffineTransform
from java.awt import BorderLayout,RenderingHints,Dimension
from javax.swing import JPanel

setScriptDescription('''Add tab which shows the layout, graphically''')

indent= getParam( 'indent', 150, 'amount to indent for children' )

panel=JPanel()
panel.layout= BorderLayout()

def drawRotate( g2d, x,  y,  angle, text):
    g2d.translate(x,y)
    g2d.rotate(Math.toRadians(angle))
    g2d.drawString(text,0,0)
    g2d.rotate(-Math.toRadians(angle))
    g2d.translate(-x,-y)
    

class MyMouseInputAdapter(MouseInputAdapter):
    def mouseClicked(self,mouseEvent):
        global selector
        for e in selector.entrySet():
            if e.value.contains(mouseEvent.point):
                print e.key
                edit= PropertyEditor(e.key)
                edit.showDialog(mouseEvent.source)
                
        
class RowsComponent(JPanel):
    def __init__(self):
        self.opaque=True
        self.addMouseListener(MyMouseInputAdapter())
   
    def paintComponent( self,g ):
        global selector
        ascent= g.getFontMetrics().ascent/2
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON)
        c= g.getClip()
        g.color= Color.LIGHT_GRAY
        if c==None: 
            g.fill(0,0,self.width,self.height)
        else:
            g.fill(g.getClip())
        g.color= Color.WHITE
        c=dom.canvases[0].controller.dasCanvas
        g.fill( Rectangle2D.Double( 0, 0, c.width, c.height ) )
        r= dom.canvases[0].marginRow
        top= r.controller.dasRow.top()
        bottom= r.controller.dasRow.bottom()
        g.color= ColorUtil.DARK_GRAY
        g.draw(Rectangle2D.Double( 10, top, 40, bottom-top ) )
        g.drawString( r.top + ',' + r.bottom, 0, top )
        drawRotate( g, 10+ascent, top+ascent, 90, r.id)
        
        rowDepth= HashMap()
        selector= HashMap()

        again=True
        while again:   
            again=False
            for i in xrange(len(dom.canvases[0].rows)):
                id= dom.canvases[0].rows[i].id
                parent=dom.canvases[0].rows[i].parent
                if ( parent==dom.canvases[0].marginRow.id ):
                    rowDepth.put(id,1)
                else:
                    if rowDepth.containsKey(parent):
                        next= rowDepth.get(parent)+1
                        rowDepth.put(id,next)
                    else:
                        print 'dont have '+parent+' so cant calculate '+id
                        again=True
        
        xpos= 150
        for r in dom.canvases[0].rows:
            if ( r.parent==dom.canvases[0].marginRow.id ):
                top= r.controller.dasRow.top()
                bottom= r.controller.dasRow.bottom()
                g.color= ColorUtil.DARK_BLUE
                shape= Rectangle2D.Double( indent + 10, top, 40, bottom-top )
                g.draw( shape )
                selector.put( r, shape )
                g.drawString( r.top + ',' + r.bottom, indent + 10, top )
                gr= g.create()
                drawRotate( g, indent + 10 + ascent, top+ascent, 90, r.id)
            else:
                top= r.controller.dasRow.top()
                bottom= r.controller.dasRow.bottom()
                g.color= ColorUtil.BLUE
                shape= Rectangle2D.Double( indent*rowDepth[r.id]  + 10, top, 40, bottom-top ) 
                selector.put( r, shape )
                g.draw(shape)
                g.drawString( r.top + ',' + r.bottom + ' '+ r.parent, indent*rowDepth[r.id] + 10, top )
                gr= g.create()
                drawRotate( g, indent*rowDepth[r.id] + 10 + ascent, top+ascent, 90, r.id)                
    
            
rowsComponent= RowsComponent()

panel.add( rowsComponent, BorderLayout.CENTER )
panel.preferredSize= Dimension(600,600)
panel.minimumSize= panel.preferredSize


addTab( 'rows', panel )

class RepaintPropertyChangeListener( PropertyChangeListener ):
    def propertyChange(self,evt):
         panel.repaint()
    
dom.controller.getDasCanvas().addPropertyChangeListener(DasCanvas.PROP_PAINTCOUNT,RepaintPropertyChangeListener())
