# This is a study of how to handle scaling on Windows.  It seems that we can
# calculate the scaling by looking at a couple of Java graphics environment
# queries.
#
#
#
#

from java.awt import Toolkit,GraphicsEnvironment
print '%d dpi' % Toolkit.getDefaultToolkit().getScreenResolution() 
dim= Toolkit.getDefaultToolkit().getScreenSize() 
print '%d x %d (scaled)' % ( dim.width, dim.height ) 

env= GraphicsEnvironment.getLocalGraphicsEnvironment()
gd = env.defaultScreenDevice
print '%d x %d ' % ( gd.displayMode.width,  gd.displayMode.height )

devices = env.screenDevices
for d in devices:
    dm= d.displayMode
    print '  %s %d x %d' % ( d.getIDstring(), dm.width, dm.height )

if ( len(devices)==1 ):
    print 'this is a laptop with scaling=%.1f%%' % ( 100 * gd.displayMode.width / dim.width )
else:
    print 'this has multiple displays, no scaling support...'

# The following output was created with an early version of this script.        
# Here is the output on my Windows model (150% scaling):
#96
#java.awt.Dimension[width=1280,height=720]
#1920

# Here is the output on Linux (no scaling):
#96
#java.awt.Dimension[width=3840,height=1080]
#3840

# windows with scaling turned off.
#96
#java.awt.Dimension[width=1920,height=1080]
#1920
