setScriptTitle('VVar Function Search')
setScriptDescription('''Show all the virtual variable functions used.  Also tally
a list of which ids use virtual variables, for the CDAWeb HAPI server.''')

d= {}  # location of example
count= {}  # number of times used

from org.autoplot.cdaweb import CDAWebDB
cdaweb= CDAWebDB.getInstance()
cdaweb.refresh( monitor.getSubtaskMonitor('refresh CDAWeb index') )
ids= cdaweb.getServiceProviderIds()

monitor.setTaskSize(len(ids))
monitor.started()

from org.das2.components import DasProgressPanel

out= open('virtualVariables.20240515.txt','w')

for id in ids:
    monitor.setTaskProgress(monitor.getTaskProgress()+1)
    if monitor.cancelled: break
    
    monitor.setProgressMessage(id)
    
    try:
        mon1= DasProgressPanel.createFramed(id)
        f= cdaweb.getMasterFile( id, mon1 )
    except:
        print '!unable to get sample file: '+id
        mon1.finished()
        continue

    print '--- ' + id + ' ---'
    ss= id
    try:
        print f + '?'
        cc= getCompletions( f + '?' )
    except:
        print 'except line 9 '+id
        continue
    virts=''
    for c in cc:
        v= c
        if ( not v.endswith('=') ):
            try:
                mm= getMetadata( v, None )
                s= mm.get('FUNCT')
                if ( s==None ): s=mm.get('FUNCTION')
                if ( s!=None ):
                    s= s.lower()
                    print v, s
                    if not d.has_key(s):
                        d[s]= v
                        count[s]= 1
                    else:
                        count[s]= count[s]+1
                    if virts.find(s)==-1:
                        virts= virts + ',' + s
            except:
                print 'except, '+v
    if len(virts)>0:
        out.write( '%s\t%d\t%s\n' % ( id, 1, virts[1:] ) )
        print '%s\t%d\t%s\n' % ( id, 1, virts[1:] )
    else:
        out.write( '%s\t%d\t%s\n' % ( id, 0, virts ) )
        print '%s\t%d\t%s\n' % ( id, 0, virts )
    print d

out.close()

print '---'
for s in d.keys():
    print '|', s, '\t|', count[s], '\t|', d[s], '|'
    
